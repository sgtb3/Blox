type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | MOD
  | FRAMEEQ
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | DOT
  | COLON
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | BREAK
  | CONTINUE
  | BUILD
  | JOIN
  | FRAME
  | SET
  | MAP
  | AT
  | EOF
  | ID of (string)
  | STRING of (string)
  | FLOAT of (float)
  | LITERAL of (int)

open Parsing;;
let _ = parse_error;;
# 3 "src/parser.mly"
 open Ast 
# 55 "src/parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* MOD *);
  270 (* FRAMEEQ *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* DOT *);
  282 (* COLON *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* INT *);
  289 (* BOOL *);
  290 (* VOID *);
  291 (* BREAK *);
  292 (* CONTINUE *);
  293 (* BUILD *);
  294 (* JOIN *);
  295 (* FRAME *);
  296 (* SET *);
  297 (* MAP *);
  298 (* AT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* ID *);
  300 (* STRING *);
  301 (* FLOAT *);
  302 (* LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\010\000\010\000\012\000\012\000\011\000\011\000\013\000\
\013\000\014\000\014\000\016\000\016\000\017\000\017\000\018\000\
\018\000\019\000\019\000\020\000\021\000\022\000\007\000\007\000\
\003\000\008\000\008\000\023\000\023\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\025\000\
\025\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\000\000\001\000\001\000\004\000\000\000\
\001\000\003\000\005\000\000\000\001\000\001\000\003\000\000\000\
\001\000\001\000\003\000\004\000\004\000\003\000\000\000\002\000\
\003\000\000\000\001\000\002\000\003\000\002\000\002\000\003\000\
\001\000\001\000\003\000\005\000\007\000\005\000\009\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\003\000\002\000\003\000\004\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\088\000\000\000\010\000\011\000\012\000\015\000\
\016\000\017\000\001\000\014\000\013\000\003\000\004\000\000\000\
\000\000\041\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\039\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\062\000\063\000\000\000\000\000\000\000\000\000\049\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\040\000\000\000\000\000\000\000\065\000\064\000\066\000\043\000\
\000\000\000\000\000\000\000\000\060\000\059\000\000\000\000\000\
\000\000\000\000\000\000\081\000\083\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\000\000\000\000\
\000\000\000\000\000\000\005\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\051\000\038\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\082\000\
\000\000\000\000\069\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\037\000\036\000\000\000\000\000\000\000\018\000\
\000\000\085\000\000\000\000\000\000\000\054\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\019\000\053\000\
\000\000\000\000\000\000\055\000"

let yydgoto = "\002\000\
\003\000\004\000\014\000\015\000\016\000\021\000\028\000\051\000\
\022\000\143\000\078\000\145\000\111\000\112\000\052\000\066\000\
\067\000\116\000\117\000\053\000\054\000\055\000\056\000\057\000\
\108\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\254\
\048\255\000\000\178\001\234\254\028\255\031\255\000\000\038\255\
\178\001\000\000\029\255\129\255\000\000\185\255\174\255\185\255\
\185\255\000\000\000\000\080\255\055\255\081\255\085\255\000\000\
\000\000\061\255\116\255\084\255\092\255\000\000\000\000\000\000\
\000\000\089\255\123\255\002\001\000\000\000\000\000\000\000\000\
\133\255\185\255\061\255\116\255\000\000\000\000\060\001\131\255\
\002\001\134\255\140\255\000\000\000\000\000\000\022\001\185\255\
\185\255\185\255\185\255\185\255\130\255\000\000\185\255\185\255\
\097\255\106\255\157\255\000\000\000\000\185\255\185\255\185\255\
\185\255\185\255\185\255\185\255\185\255\185\255\185\255\185\255\
\185\255\185\255\174\255\154\001\000\000\000\000\000\000\185\255\
\000\000\078\001\154\001\165\255\096\001\164\255\176\255\171\255\
\114\001\084\255\154\001\177\255\175\255\154\001\000\000\000\000\
\076\255\076\255\000\000\000\000\046\255\135\255\135\255\143\000\
\143\000\143\000\143\000\189\001\172\001\000\000\154\001\174\255\
\185\255\174\255\000\000\000\000\185\255\185\255\178\255\000\000\
\166\255\000\000\185\255\154\255\042\001\000\000\134\001\154\001\
\084\255\000\000\154\001\174\255\185\255\185\255\000\000\000\000\
\187\255\154\001\174\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\188\255\000\000\000\000\189\255\000\000\000\000\
\000\000\000\000\000\000\183\255\000\000\000\000\193\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\151\255\224\254\000\000\046\000\231\255\252\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\193\255\000\000\000\000\000\000\000\000\000\000\000\000\
\105\255\000\000\014\255\000\000\000\000\000\000\000\000\000\000\
\198\255\000\000\197\255\028\255\070\000\000\000\200\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\203\255\023\255\000\000\000\000\000\000\000\000\
\000\000\000\000\035\255\000\000\000\000\000\000\000\000\208\255\
\000\000\194\255\010\255\000\000\209\255\090\255\000\000\000\000\
\094\000\118\000\000\000\000\000\142\000\009\255\074\255\166\000\
\190\000\214\000\238\000\017\255\024\000\000\000\068\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\202\255\000\000\
\000\000\000\000\000\000\221\255\000\000\000\000\000\000\101\255\
\000\000\000\000\109\255\000\000\220\255\000\000\000\000\000\000\
\000\000\132\255\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\196\000\000\000\080\000\000\000\000\000\202\000\
\000\000\000\000\142\255\000\000\000\000\000\000\228\255\159\000\
\000\000\000\000\000\000\000\000\000\000\000\000\136\000\127\255\
\079\000"

let yytablesize = 735
let yytable = "\144\000\
\011\000\063\000\065\000\068\000\069\000\001\000\148\000\071\000\
\150\000\072\000\017\000\072\000\034\000\072\000\072\000\034\000\
\029\000\079\000\029\000\079\000\023\000\079\000\079\000\072\000\
\072\000\030\000\160\000\030\000\030\000\100\000\024\000\072\000\
\072\000\164\000\072\000\057\000\025\000\057\000\159\000\079\000\
\079\000\026\000\079\000\106\000\107\000\109\000\100\000\113\000\
\018\000\019\000\115\000\118\000\086\000\087\000\088\000\089\000\
\072\000\121\000\122\000\123\000\124\000\125\000\126\000\127\000\
\128\000\129\000\130\000\131\000\132\000\133\000\031\000\029\000\
\031\000\031\000\073\000\135\000\073\000\075\000\073\000\073\000\
\070\000\030\000\073\000\058\000\088\000\089\000\074\000\032\000\
\073\000\073\000\084\000\033\000\084\000\079\000\084\000\084\000\
\073\000\073\000\020\000\073\000\034\000\035\000\080\000\026\000\
\027\000\081\000\026\000\050\000\149\000\030\000\030\000\035\000\
\151\000\152\000\035\000\084\000\082\000\076\000\155\000\059\000\
\060\000\044\000\045\000\061\000\062\000\048\000\077\000\084\000\
\107\000\162\000\030\000\083\000\031\000\099\000\027\000\102\000\
\032\000\027\000\103\000\119\000\033\000\086\000\087\000\088\000\
\089\000\104\000\114\000\090\000\120\000\034\000\035\000\093\000\
\094\000\095\000\096\000\036\000\037\000\018\000\038\000\039\000\
\005\000\006\000\007\000\040\000\041\000\137\000\139\000\008\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\030\000\
\141\000\031\000\140\000\146\000\147\000\032\000\156\000\153\000\
\154\000\033\000\030\000\042\000\058\000\163\000\006\000\007\000\
\032\000\016\000\034\000\035\000\033\000\028\000\056\000\028\000\
\036\000\037\000\032\000\038\000\039\000\034\000\035\000\044\000\
\040\000\041\000\025\000\033\000\020\000\059\000\060\000\044\000\
\045\000\061\000\062\000\048\000\021\000\052\000\056\000\049\000\
\059\000\060\000\044\000\045\000\061\000\062\000\048\000\060\000\
\064\000\110\000\134\000\161\000\000\000\060\000\060\000\060\000\
\060\000\000\000\000\000\060\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\000\000\059\000\060\000\060\000\000\000\
\000\000\000\000\059\000\059\000\059\000\059\000\000\000\000\000\
\059\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\014\000\059\000\059\000\000\000\000\000\000\000\000\000\
\080\000\000\000\080\000\000\000\080\000\080\000\000\000\000\000\
\005\000\006\000\007\000\000\000\000\000\000\000\013\000\008\000\
\009\000\010\000\000\000\000\000\012\000\013\000\061\000\080\000\
\061\000\080\000\061\000\061\000\061\000\061\000\061\000\061\000\
\000\000\000\000\061\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\000\000\000\000\061\000\061\000\022\000\061\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\000\000\022\000\000\000\022\000\022\000\000\000\022\000\
\022\000\022\000\000\000\000\000\022\000\022\000\067\000\022\000\
\067\000\000\000\067\000\067\000\067\000\067\000\000\000\000\000\
\000\000\000\000\067\000\000\000\067\000\067\000\067\000\067\000\
\067\000\067\000\000\000\000\000\067\000\067\000\068\000\067\000\
\068\000\000\000\068\000\068\000\068\000\068\000\000\000\000\000\
\000\000\000\000\068\000\000\000\068\000\068\000\068\000\068\000\
\068\000\068\000\000\000\000\000\068\000\068\000\071\000\068\000\
\071\000\000\000\071\000\071\000\000\000\086\000\087\000\088\000\
\089\000\000\000\071\000\090\000\071\000\071\000\071\000\071\000\
\071\000\071\000\000\000\000\000\071\000\071\000\074\000\071\000\
\074\000\000\000\074\000\074\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\074\000\074\000\074\000\074\000\
\074\000\074\000\000\000\000\000\074\000\074\000\075\000\074\000\
\075\000\000\000\075\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\075\000\075\000\075\000\
\075\000\075\000\000\000\000\000\075\000\075\000\076\000\075\000\
\076\000\000\000\076\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\076\000\076\000\076\000\
\076\000\076\000\000\000\000\000\076\000\076\000\077\000\076\000\
\077\000\000\000\077\000\077\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\000\077\000\077\000\077\000\
\077\000\077\000\085\000\000\000\077\000\077\000\000\000\077\000\
\086\000\087\000\088\000\089\000\000\000\000\000\090\000\000\000\
\091\000\092\000\093\000\094\000\095\000\096\000\105\000\000\000\
\097\000\098\000\000\000\000\000\086\000\087\000\088\000\089\000\
\000\000\000\000\090\000\000\000\091\000\092\000\093\000\094\000\
\095\000\096\000\157\000\000\000\097\000\098\000\000\000\000\000\
\086\000\087\000\088\000\089\000\000\000\000\000\090\000\000\000\
\091\000\092\000\093\000\094\000\095\000\096\000\101\000\000\000\
\097\000\098\000\086\000\087\000\088\000\089\000\000\000\000\000\
\090\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\136\000\000\000\097\000\098\000\086\000\087\000\088\000\089\000\
\000\000\000\000\090\000\000\000\091\000\092\000\093\000\094\000\
\095\000\096\000\138\000\000\000\097\000\098\000\086\000\087\000\
\088\000\089\000\000\000\000\000\090\000\000\000\091\000\092\000\
\093\000\094\000\095\000\096\000\000\000\000\000\097\000\098\000\
\086\000\087\000\088\000\089\000\000\000\000\000\090\000\000\000\
\091\000\092\000\093\000\094\000\095\000\096\000\000\000\000\000\
\097\000\098\000\000\000\142\000\086\000\087\000\088\000\089\000\
\000\000\000\000\090\000\000\000\091\000\092\000\093\000\094\000\
\095\000\096\000\000\000\000\000\097\000\098\000\000\000\158\000\
\086\000\087\000\088\000\089\000\000\000\000\000\090\000\000\000\
\091\000\092\000\093\000\094\000\095\000\096\000\000\000\000\000\
\097\000\098\000\086\000\087\000\088\000\089\000\000\000\000\000\
\090\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\000\000\000\000\097\000\086\000\087\000\088\000\089\000\000\000\
\000\000\090\000\000\000\091\000\092\000\093\000\094\000\095\000\
\096\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\008\000\009\000\010\000\000\000\000\000\012\000\013\000"

let yycheck = "\114\000\
\000\000\030\000\031\000\032\000\033\000\001\000\136\000\036\000\
\138\000\001\001\043\001\003\001\003\001\005\001\006\001\006\001\
\003\001\001\001\005\001\003\001\043\001\005\001\006\001\015\001\
\016\001\003\001\156\000\005\001\006\001\058\000\003\001\023\001\
\024\001\163\000\026\001\001\001\006\001\003\001\153\000\023\001\
\024\001\004\001\026\001\072\000\073\000\074\000\075\000\076\000\
\001\001\002\001\079\000\080\000\007\001\008\001\009\001\010\001\
\002\001\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\003\001\043\001\
\005\001\006\001\001\001\104\000\003\001\017\001\005\001\006\001\
\001\001\002\001\002\001\004\001\009\001\010\001\002\001\008\001\
\015\001\016\001\001\001\012\001\003\001\002\001\005\001\006\001\
\023\001\024\001\019\000\026\001\021\001\022\001\011\001\003\001\
\025\000\014\001\006\001\028\000\137\000\005\001\006\001\003\001\
\141\000\142\000\006\001\026\001\025\001\002\001\147\000\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\043\001\005\001\
\157\000\158\000\002\001\043\001\004\001\001\001\003\001\005\001\
\008\001\006\001\005\001\043\001\012\001\007\001\008\001\009\001\
\010\001\006\001\017\001\013\001\043\001\021\001\022\001\017\001\
\018\001\019\001\020\001\027\001\028\001\001\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\001\001\003\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\002\001\
\006\001\004\001\003\001\003\001\006\001\008\001\029\001\006\001\
\019\001\012\001\002\001\005\001\004\001\003\001\003\001\003\001\
\008\001\043\001\021\001\022\001\012\001\005\001\001\001\003\001\
\027\001\028\001\003\001\030\001\031\001\021\001\022\001\005\001\
\035\001\036\001\003\001\003\001\019\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\019\001\001\001\003\001\028\000\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\001\001\
\031\000\075\000\099\000\157\000\255\255\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\001\001\023\001\024\001\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\043\001\023\001\024\001\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\255\255\005\001\006\001\255\255\255\255\
\032\001\033\001\034\001\255\255\255\255\255\255\043\001\039\001\
\040\001\041\001\255\255\255\255\044\001\045\001\001\001\024\001\
\003\001\026\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\016\001\255\255\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\255\255\007\001\008\001\009\001\
\010\001\255\255\013\001\013\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\026\001\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\001\001\255\255\023\001\024\001\255\255\026\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\001\001\255\255\
\023\001\024\001\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\001\001\255\255\023\001\024\001\255\255\255\255\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\003\001\255\255\
\023\001\024\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\003\001\255\255\023\001\024\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\255\255\023\001\024\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\255\255\026\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\255\255\026\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\007\001\008\001\009\001\010\001\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\255\255\255\255\044\001\045\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  MOD\000\
  FRAMEEQ\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  DOT\000\
  COLON\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  BREAK\000\
  CONTINUE\000\
  BUILD\000\
  JOIN\000\
  FRAME\000\
  SET\000\
  MAP\000\
  AT\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  STRING\000\
  FLOAT\000\
  LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 39 "src/parser.mly"
            ( _1 )
# 465 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "src/parser.mly"
                 ( [], []                 )
# 471 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 43 "src/parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 479 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 44 "src/parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 487 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 48 "src/parser.mly"
    (
      { typ     = _1;
        fname   = _2;
        formals = _4;
        locals  = List.rev _7;
        body    = List.rev _8
      }
    )
# 505 "src/parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "src/parser.mly"
                  ( []          )
# 511 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 59 "src/parser.mly"
                  ( List.rev _1 )
# 518 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "src/parser.mly"
                             ( [(_1, _2)]     )
# 526 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "src/parser.mly"
                             ( (_3, _4) :: _1 )
# 535 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "src/parser.mly"
          ( Int    )
# 541 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "src/parser.mly"
          ( Bool   )
# 547 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "src/parser.mly"
          ( Void   )
# 553 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 69 "src/parser.mly"
          ( Float  )
# 560 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "src/parser.mly"
          ( String )
# 567 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "src/parser.mly"
          ( Frame  )
# 573 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "src/parser.mly"
          ( Set    )
# 579 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "src/parser.mly"
          ( Map    )
# 585 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 76 "src/parser.mly"
            ([_1])
# 592 "src/parser.ml"
               : 'typedef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 77 "src/parser.mly"
                                 (_3::_1)
# 600 "src/parser.ml"
               : 'typedef_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "src/parser.mly"
                 ([])
# 606 "src/parser.ml"
               : 'typedef_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_list) in
    Obj.repr(
# 81 "src/parser.mly"
                   (List.rev _1)
# 613 "src/parser.ml"
               : 'typedef_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 85 "src/parser.mly"
       (
        match _1 with
        | "Int" -> Int
        | "Bool" -> Bool
        | "Void" -> Void
        | "String" -> String
        | "Float" -> Float
        | "Map" | "Set" -> failwith ("set map init must with parameters")
        | x -> Class x
    )
# 629 "src/parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_list_opt) in
    Obj.repr(
# 95 "src/parser.mly"
                                (
        match _1 with
        | "Set" -> begin
                match _3 with
                |[x] -> Set x
                | _ -> failwith ("set just with one parameter")
                end
        | "Map" -> begin
                match _3 with
                | [x;y] -> Map (x,y)
                | _ -> failwith ("map just two parameter")
                end
        | "Array" -> begin
               match _3 with
               |[x] -> Array x
               | _ -> failwith ("array just with one parameter")
               end
        | _ -> failwith ("not suppport template except set map")
    )
# 655 "src/parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "src/parser.mly"
                ([])
# 661 "src/parser.ml"
               : 'expr_pair_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_pair_true_list) in
    Obj.repr(
# 118 "src/parser.mly"
                          (_1)
# 668 "src/parser.ml"
               : 'expr_pair_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "src/parser.mly"
                      ([(_1, _3)])
# 676 "src/parser.ml"
               : 'expr_pair_true_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr_pair_true_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "src/parser.mly"
                                                ((_3,_5)::_1)
# 685 "src/parser.ml"
               : 'expr_pair_true_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "src/parser.mly"
                        ( [] )
# 691 "src/parser.ml"
               : 'expr_list_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_true_list_set) in
    Obj.repr(
# 126 "src/parser.mly"
                        ( _1 )
# 698 "src/parser.ml"
               : 'expr_list_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "src/parser.mly"
                            ( [_1]     )
# 705 "src/parser.ml"
               : 'expr_true_list_set))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_true_list_set) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "src/parser.mly"
                                  ( _3 :: _1 )
# 713 "src/parser.ml"
               : 'expr_true_list_set))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "src/parser.mly"
                  ( []          )
# 719 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 135 "src/parser.mly"
                  ( List.rev _1 )
# 726 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "src/parser.mly"
                            ( [_1]     )
# 733 "src/parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "src/parser.mly"
                            ( _3 :: _1 )
# 741 "src/parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_pair_list) in
    Obj.repr(
# 142 "src/parser.mly"
                                     (Map(List.rev _3))
# 748 "src/parser.ml"
               : 'map))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_set) in
    Obj.repr(
# 144 "src/parser.mly"
                                (Set(List.rev _3))
# 755 "src/parser.ml"
               : 'set))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_set) in
    Obj.repr(
# 146 "src/parser.mly"
                                (Array (List.rev _2))
# 762 "src/parser.ml"
               : 'arr))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "src/parser.mly"
                     ( []       )
# 768 "src/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 150 "src/parser.mly"
                     ( _2 :: _1 )
# 776 "src/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 153 "src/parser.mly"
               ( (_1, _2) )
# 784 "src/parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "src/parser.mly"
                ([])
# 790 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_true_list) in
    Obj.repr(
# 157 "src/parser.mly"
                     (_1)
# 797 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 160 "src/parser.mly"
              ([_1])
# 804 "src/parser.ml"
               : 'stmt_true_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_true_list) in
    Obj.repr(
# 161 "src/parser.mly"
                               (_1 :: _3)
# 812 "src/parser.ml"
               : 'stmt_true_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 164 "src/parser.mly"
                                            ( Expr _1               )
# 819 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "src/parser.mly"
                                            ( Return Noexpr         )
# 825 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 166 "src/parser.mly"
                                            ( Return _2             )
# 832 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "src/parser.mly"
                                            ( Break                 )
# 838 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "src/parser.mly"
                                            ( Continue              )
# 844 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 169 "src/parser.mly"
                                            ( Block(List.rev _2)    )
# 851 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 170 "src/parser.mly"
                                            ( If(_3, _5, Block([])) )
# 859 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 171 "src/parser.mly"
                                            ( If(_3, _5, _7)        )
# 868 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 172 "src/parser.mly"
                                            ( While(_3, _5)         )
# 876 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 174 "src/parser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 886 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "src/parser.mly"
                  ( Noexpr )
# 892 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "src/parser.mly"
                  ( _1     )
# 899 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 181 "src/parser.mly"
                                 ( Literal(_1)            )
# 906 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 182 "src/parser.mly"
                                 ( Float(_1)              )
# 913 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 183 "src/parser.mly"
                                 ( String(_1)             )
# 920 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 184 "src/parser.mly"
                                 ( Id(_1)                 )
# 927 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "src/parser.mly"
                                 ( BoolLit(true)          )
# 933 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "src/parser.mly"
                                 ( BoolLit(false)         )
# 939 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set) in
    Obj.repr(
# 187 "src/parser.mly"
                                 ( _1                     )
# 946 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'map) in
    Obj.repr(
# 188 "src/parser.mly"
                                 ( _1                     )
# 953 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arr) in
    Obj.repr(
# 189 "src/parser.mly"
                                 ( _1                     )
# 960 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "src/parser.mly"
                                 ( Binop(_1, Add,     _3) )
# 968 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "src/parser.mly"
                                 ( Binop(_1, Sub,     _3) )
# 976 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "src/parser.mly"
                                 ( Binop(_1, Mult,    _3) )
# 984 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "src/parser.mly"
                                 ( Binop(_1, Div,     _3) )
# 992 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "src/parser.mly"
                                 ( Binop(_1, Mod,     _3) )
# 1000 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "src/parser.mly"
                                 ( Binop(_1, Equal,   _3) )
# 1008 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 196 "src/parser.mly"
                                 ( Binop(_1, Neq,     _3) )
# 1016 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "src/parser.mly"
                                 ( Binop(_1, Less,    _3) )
# 1024 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 198 "src/parser.mly"
                                 ( Binop(_1, Leq,     _3) )
# 1032 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "src/parser.mly"
                                 ( Binop(_1, Greater, _3) )
# 1040 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "src/parser.mly"
                                 ( Binop(_1, Geq,     _3) )
# 1048 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 201 "src/parser.mly"
                                 ( Binop(_1, FrameEq, _3) )
# 1056 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "src/parser.mly"
                                 ( Binop(_1, And,     _3) )
# 1064 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "src/parser.mly"
                                 ( Binop(_1, Or,      _3) )
# 1072 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 204 "src/parser.mly"
                                 ( Unop(Neg, _2)          )
# 1079 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 205 "src/parser.mly"
                                 ( Objid(_1, _3)          )
# 1087 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 206 "src/parser.mly"
                                 ( Unop(Not, _2)          )
# 1094 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 207 "src/parser.mly"
                                 ( Assign(_1, _3)         )
# 1102 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 208 "src/parser.mly"
                                 ( Call(_1, _3)           )
# 1110 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 210 "src/parser.mly"
                         ( ObjGen(_2)							)
# 1117 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 211 "src/parser.mly"
                                 ( _2                     )
# 1124 "src/parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
